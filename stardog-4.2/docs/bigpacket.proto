// Copyright (c) 2010 - 2013 -- Clark & Parsia, LLC. <http://www.clarkparsia.com>
// For more information about licensing and copyright of this software, please contact
// inquiries@clarkparsia.com or visit http://stardog.com

package com.complexible.barc;

import "core.proto";

option java_outer_classname = "Protocol";

// This is default, but it's nice to be explicit
option optimize_for = SPEED;

// BigPacket specification

/**
 * This is the BigPacket.  This is the master message exchanged between client & server over the Netty channel.
 */
message BigPacket {
	// message identifier so we can bookkeep on both ends
	// and the type of the command.
	required com.complexible.common.protobuf.core.UID		id  = 1;

    // the message type of the BigPacket
    optional int32      messageType     = 2;

	// the type of payload to expect
	required int32 		type 			= 3;

	// for streamed results, this indicates whether or
	// not there are more messages forthcoming
	// when true, this is the final response for the command
	// when false, there are still more results to come.
	optional bool		endOfSequence	= 4 [default = true];

    // this is the context holding information about the connection
    // between client & server, such as authentication information, connection
    // status or metadata, etc.
	optional ConnectionContext	context	= 5;

    // the payload of the packet.  This is usually some sort of encoded protobuf
    // objects, but it could just be raw data, this all depends on the type handler.
	required bytes		payload			= 6;
}

/**
 * Payload object representing information about an error sufficient for re-creating the notional exception
 * on the client.
 */
message ErrorMessage {
	optional string 	    message = 1;
	optional int32  	    error   = 2;
	optional ErrorMessage   cause   = 3;
}

/**
 * Message for encoding login credentials for a user.  Used to send the login information to the server and
 * used to track credentials in a live connection.
 *
 * @see ConnectionContext
 */
message AuthToken {
	required string	username = 1;
	required bytes	password = 2;
}

/**
 * Message for tracking the information about the current connection's 'session'  This information is obtained
 * when connecting to the server and must be provided on all subsequent requests to the server.
 */
message ConnectionContext {
	/**
	 * The authentication information for the request-response exchange.  This information is exchanged for each
	 * round-trip to the server as with HTTP authentication.
	 */
	required AuthToken 	auth	= 1;

	extensions 2 to 25;
}

/**
 * In & Out payload for querying and receiving the protocol version supported by the server.
 */
message Version {
	required int32 version 		= 1 [default = 1];
}

/**
 * Protobuf message suitable for sending a single long value
 */
message LongMessage {
	required int64	value	= 1;
}

/**
 * Protobuf message for sending a single boolean value
 */
message BoolMessage {
	required bool	value	= 1;
}

/**
 * Protobuf message for sending a single String value
 */
message StringMessage {
	required string	value	= 1;
}

/**
 * Protobuf message for sending a single int value
 */
message IntegerMessage {
	required int32	value	= 1;
}

/**
 * Protobuf message suitable for sending a single float value
 */
message FloatMessage {
	required float	value	= 1;
}

/**
 * Protobuf message suitable for sending a single double value
 */
message DoubleMessage {
	required double	value	= 1;
}

message FileMessage {
	required string fileName = 1;
}

message BinaryMessage {
    required bytes bytes    = 1;
}